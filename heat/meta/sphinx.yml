doc:
  name: Heat
  description: Heat implements an orchestration engine to launch multiple composite cloud applications based on templates in the form of text files that can be treated like code.
  role:
  {%- if pillar.heat.server is defined %}
  {%- from "heat/map.jinja" import server with context %}
    server:
      name: server
      endpoint:
        heat_api:
          name: heat-api
          type: heat-api
          address: http://{{ server.bind.api.address }}:8004
          protocol: http
        heat_api_cfn:
          name: heat-api-cfn
          type: heat-api-cfn
          address: http://{{ server.bind.api_cfn.address }}:8003
          protocol: http
        heat_api_cloudwatch:
          name: heat-api-cloudwatch
          type: heat-api-cloudwatch
          address: http://{{ server.bind.api_cloudwatch.address }}:8000
          protocol: http
      param:
        bind:
          value: {{ server.bind.api.address }}:8004
        version:
          name: "Version"
          value: {{ server.version }}
        database_host:
          name: "Database"
          value: {{ server.database.user }}@{{ server.database.host }}:{{ server.database.port }}//{{ server.database.name }}
        {%- set rabbit_port = server.message_queue.get('port', 5671 if server.message_queue.get('ssl',{}).get('enabled', False)  else 5672) %}
        message_queue_ip:
          name: "Message queue"
          {%- if server.message_queue.members is defined %}
          value: {% for member in server.message_queue.members -%}
                 {{ server.message_queue.user }}:{{ server.message_queue.password }}@{{ member.host }}:{{ member.get('port',rabbit_port) }}
                 {%- if not loop.last -%},{%- endif -%}
                 {%- endfor -%}
                 /{{ server.message_queue.virtual_host }}
          {%- else %}
          value:  {{ server.message_queue.user }}:{{ server.message_queue.password }}@{{ server.message_queue.host }}:{{ rabbit_port }}/{{ server.message_queue.virtual_host }}
          {%- endif %}
        identity_host:
          name: "Identity service"
          value: {{ server.identity.user }}@{{ server.identity.host }}:{{ server.identity.port }}
        packages:
          value: |
            {%- for pkg in server.pkgs %}
            {%- set pkg_version = "dpkg -l "+pkg+" | grep "+pkg+" | awk '{print $3}'" %}
            * {{ pkg }}: {{ salt['cmd.shell'](pkg_version) }}
            {%- endfor %}
  {%- endif %}
  {%- if pillar.heat.client is defined %}
    client:
      name: client
      param: {}
  {%- endif %}
